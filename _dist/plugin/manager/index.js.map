{"version":3,"file":"index.js","sources":["../../../node_modules/@typhonjs-svelte/runtime-base/_dist/plugin/manager/index.js"],"sourcesContent":["import { Eventbus, EventbusProxy, EventbusSecure } from '@typhonjs-svelte/runtime-base/plugin/manager/eventbus';\n\n/**\n * Provides a custom error for Node to combine CJS and ESM module not found errors.\n */\nclass ModuleLoadError extends Error\n{\n   /**\n    * @param {object} options - Options object.\n    *\n    * @param {string} options.message - Error message.\n    *\n    * @param {string} options.code - Error code.\n    */\n   constructor({ message, code })\n   {\n      super(`[${code}] ${message}`);\n      this.name = 'ModuleLoadError';\n      this.code = code;\n   }\n}\n\n/**\n * URL matching RegExp\n *\n * @type {RegExp}\n */\nconst s_URL_REGEX = /^(https?:\\/\\/|file:\\/\\/)/;\n\nclass ModuleLoader\n{\n   /**\n    * @template M, E\n    *\n    * Loads an ES Module in the browser passing back an object containing info about the loading process.\n    *\n    * @param {object}      options - Options object.\n    *\n    * @param {string|URL}  options.modulepath - A module name, file path, or URL.\n    *\n    * @param {(M) => E}    [options.resolveModule] - An optional function which resolves the import to set `instance`.\n    *\n    * @returns {Promise<ModuleLoaderObj<M, E>>} The module / instance and data about the loading process.\n    */\n   static async load({ modulepath, resolveModule = void 0 })\n   {\n      if (!(modulepath instanceof URL) && typeof modulepath !== 'string')\n      {\n         throw new TypeError(`'modulepath' is not a string or URL`);\n      }\n\n      if (resolveModule !== void 0 && typeof resolveModule !== 'function')\n      {\n         throw new TypeError(`'resolveModule' is not a function`);\n      }\n\n      const loadpath = modulepath instanceof URL ? modulepath.toString() : modulepath;\n\n      const type = `import-${modulepath instanceof URL ||\n      (typeof modulepath === 'string' && modulepath.match(s_URL_REGEX)) ? 'url' : 'path'}`;\n\n      try\n      {\n         const module = await import(modulepath);\n\n         const instance = resolveModule !== void 0 ? resolveModule(module) : module;\n\n         return { filepath: loadpath, instance, isESM: true, loadpath, module, modulepath, type };\n      }\n      catch (error)\n      {\n         // In case the browser version of ModuleLoader is used on Node... The CJS and ESM loaders of Node have\n         // different error codes. Collect both of these as one error with clear stack trace from ModuleLoader.\n         /* istanbul ignore next */\n         if (error.code === 'MODULE_NOT_FOUND' || error.code === 'ERR_MODULE_NOT_FOUND')\n         {\n            throw new ModuleLoadError({\n               message: `import() failed to load ${loadpath}`,\n               code: 'ERR_MODULE_NOT_FOUND'\n            });\n         }\n\n         throw error;\n      }\n   }\n}\n\n/**\n * Defines a class holding the data associated with a plugin including its instance.\n */\nclass PluginEntry\n{\n   /**\n    * Data describing the plugin, manager, and optional module data.\n    *\n    * @type {import('.').PluginData}\n    */\n   #data;\n\n   /**\n    * The plugin enabled state.\n    *\n    * @type {boolean}\n    */\n   #enabled;\n\n   /**\n    * The plugin name.\n    *\n    * @type {string}\n    */\n   #name;\n\n   /**\n    * Any stored import.meta data.\n    *\n    * @type {object}\n    */\n   #importmeta;\n\n   /**\n    * The loaded plugin instance.\n    *\n    * @type {object}\n    */\n   #instance;\n\n   /**\n    * An EventbusProxy associated with the plugin wrapping the plugin manager eventbus.\n    *\n    * @type {import('#manager/eventbus').EventbusProxy}\n    */\n   #eventbusProxy;\n\n   /**\n    * Stores the proxied event names, callback functions, context and guarded state when this plugin is disabled.\n    *\n    * @type {Array<[string, Function, object, import('#manager/eventbus').EventOptionsOut]>}\n    */\n   #events;\n\n   /**\n    * Instantiates a PluginEntry.\n    *\n    * @param {string}      name - The plugin name.\n    *\n    * @param {import('.').PluginData}  data - Describes the plugin, manager, and optional module data.\n    *\n    * @param {object}      instance - The loaded plugin instance.\n    *\n    * @param {import('#manager/eventbus').EventbusProxy}  eventbusProxy - The EventbusProxy associated with the plugin\n    *        wrapping the plugin manager eventbus.\n    */\n   constructor(name, data, instance, eventbusProxy = void 0)\n   {\n      this.#data = data;\n\n      this.#enabled = true;\n\n      this.#name = name;\n\n      this.#instance = instance;\n\n      this.#eventbusProxy = eventbusProxy;\n   }\n\n   /**\n    * Get plugin data.\n    *\n    * @returns {import('.').PluginData} The associated PluginData.\n    */\n   get data() { return this.#data; }\n\n   /**\n    * Get enabled.\n    *\n    * @returns {boolean} Current enabled state.\n    */\n   get enabled() { return this.#enabled; }\n\n   /**\n    * Get any stored import.meta object.\n    *\n    * @returns {undefined|object} Any set import.meta info.\n    */\n   get importmeta() { return this.#importmeta; }\n\n   /**\n    * Reset will cleanup most resources for remove / reload. 'remove' should manually destroy #eventbusProxy.\n    */\n   reset()\n   {\n      try\n      {\n         this.#events = void 0;\n         this.#importmeta = void 0;\n\n         // Automatically remove any potential reference to a stored event proxy instance.\n         delete this.#instance._eventbus;\n      }\n      catch (err) { /* noop */ }\n   }\n\n   /**\n    * Set enabled.\n    *\n    * @param {boolean} enabled - New enabled state.\n    */\n   set enabled(enabled)\n   {\n      this.#enabled = enabled;\n\n      // If enabled and there are stored events then turn them on with the eventbus proxy.\n      if (enabled)\n      {\n         if (this.#eventbusProxy !== void 0 && Array.isArray(this.#events))\n         {\n            for (const event of this.#events)\n            {\n               this.#eventbusProxy.on(...event);\n            }\n\n            this.#events = void 0;\n         }\n      }\n      else // Store any proxied events and unregister the proxied events.\n      {\n         if (this.#eventbusProxy !== void 0)\n         {\n            this.#events = Array.from(this.#eventbusProxy.proxyEntries());\n            this.#eventbusProxy.off();\n         }\n      }\n   }\n\n   /**\n    * Get associated EventbusProxy.\n    *\n    * @returns {import('#manager/eventbus').EventbusProxy} Associated EventbusProxy.\n    */\n   get eventbusProxy() { return this.#eventbusProxy; }\n\n   /**\n    * Get plugin instance.\n    *\n    * @returns {object} The plugin instance.\n    */\n   get instance() { return this.#instance; }\n\n   /**\n    * Get plugin name.\n    *\n    * @returns {string} Plugin name.\n    */\n   get name() { return this.#name; }\n\n\n   /**\n    * Set associated EventbusProxy.\n    *\n    * @param {import('#manager/eventbus').EventbusProxy} eventbusProxy - EventbusProxy instance to associate.\n    */\n   set eventbusProxy(eventbusProxy) { this.#eventbusProxy = eventbusProxy; }\n\n   /**\n    * Set any associated import.meta data.\n    *\n    * @param {object} importmeta - import.meta data.\n    */\n   set importmeta(importmeta) { this.#importmeta = importmeta; }\n\n   /**\n    * Set plugin instance.\n    *\n    * @param {object} instance - The plugin instance.\n    */\n   set instance(instance) { this.#instance = instance; }\n}\n\n/**\n * Provides common object manipulation utilities including depth traversal, obtaining accessors, safely setting values /\n * equality tests, and validation.\n */\n\n/**\n * @typedef {object} ValidationEntry - Provides data for a validation check.\n *\n * @property {string}               [type] - Optionally tests with a typeof check.\n *\n * @property {Array<*>|Function|Set<*>}  [expected] - Optional array, function, or set of expected values to test\n * against.\n *\n * @property {string}               [message] - Optional message to include.\n *\n * @property {boolean}              [required=true] - When false if the accessor is missing validation is skipped.\n *\n * @property {boolean}              [error=true] - When true and error is thrown otherwise a boolean is returned.\n */\n\n/**\n * Freezes all entries traversed that are objects including entries in arrays.\n *\n * @param {object|Array}   data - An object or array.\n *\n * @param {string[]}       skipFreezeKeys - An array of strings indicating keys of objects to not freeze.\n *\n * @returns {object|Array} The frozen object.\n */\nfunction deepFreeze(data, skipFreezeKeys = [])\n{\n   /* istanbul ignore if */\n   if (typeof data !== 'object') { throw new TypeError(`'data' is not an 'object'.`); }\n\n   /* istanbul ignore if */\n   if (!Array.isArray(skipFreezeKeys)) { throw new TypeError(`'skipFreezeKeys' is not an 'array'.`); }\n\n   return _deepFreeze(data, skipFreezeKeys);\n}\n\n/**\n * Tests for whether an object is iterable.\n *\n * @param {*} value - Any value.\n *\n * @returns {boolean} Whether object is iterable.\n */\nfunction isIterable(value)\n{\n   if (value === null || value === void 0 || typeof value !== 'object') { return false; }\n\n   return typeof value[Symbol.iterator] === 'function';\n}\n\n/**\n * Tests for whether object is not null and a typeof object.\n *\n * @param {*} value - Any value.\n *\n * @returns {boolean} Is it an object.\n */\nfunction isObject(value)\n{\n   return value !== null && typeof value === 'object';\n}\n\n// Module private ---------------------------------------------------------------------------------------------------\n\n/**\n * Private implementation of depth traversal.\n *\n * @param {object|Array}   data - An object or array.\n *\n * @param {string[]}       skipFreezeKeys - An array of strings indicating keys of objects to not freeze.\n *\n * @returns {*} The frozen object.\n * @ignore\n * @private\n */\nfunction _deepFreeze(data, skipFreezeKeys)\n{\n   if (Array.isArray(data))\n   {\n      for (let cntr = 0; cntr < data.length; cntr++) { _deepFreeze(data[cntr], skipFreezeKeys); }\n   }\n   else if (typeof data === 'object')\n   {\n      for (const key in data)\n      {\n         // eslint-disable-next-line no-prototype-builtins\n         if (data.hasOwnProperty(key) && !skipFreezeKeys.includes(key)) { _deepFreeze(data[key], skipFreezeKeys); }\n      }\n   }\n\n   return Object.freeze(data);\n}\n\n/**\n * PluginEvent - Provides the data / event passed to all invoked methods in\n * {@link PluginInvokeSupport#invokeSyncEvent}. The `event.data` field is returned to the caller. Before returning\n * though additional the following additional metadata is attached:\n *\n * (number)    `$$plugin_invoke_count` - The count of plugins invoked.\n *\n * (string[])  `$$plugin_invoke_names` - The names of plugins invoked.\n */\nclass PluginInvokeEvent\n{\n   /**\n    * Initializes PluginEvent.\n    *\n    * @param {object} copyProps - Event data to copy.\n    *\n    * @param {object} passthruProps - Event data to pass through.\n    */\n   constructor(copyProps = {}, passthruProps = {})\n   {\n      /**\n       * Provides the unified event data assigning any pass through data to the copied data supplied. Invoked functions\n       * may add to or modify this data.\n       *\n       * @type {import('../../').PluginEventData}\n       */\n      this.data = Object.assign(JSON.parse(JSON.stringify(copyProps)), passthruProps);\n\n      /**\n       * Unique data available in each plugin invoked.\n       *\n       * @type {import('#manager/eventbus').EventbusProxy} - The active EventbusProxy for that particular plugin.\n       */\n      this.eventbus = null;\n\n      /**\n       * Unique data available in each plugin invoked.\n       *\n       * @type {string} - The active plugin name.\n       */\n      this.pluginName = '';\n\n      /**\n       * Unique data available in each plugin invoked.\n       *\n       * @type {object} - The active plugin options.\n       */\n      this.pluginOptions = '';\n   }\n}\n\n/**\n * Private implementation to invoke asynchronous events. This allows internal calls in PluginManager for\n * `onPluginLoad` and `onPluginUnload` callbacks to bypass optional error checking.\n *\n * This dispatch method asynchronously passes to and returns from any invoked targets a PluginEvent. Any invoked plugin\n * may return a Promise which is awaited upon by `Promise.all` before returning the PluginEvent data via a Promise.\n *\n * @param {object}                     opts - Options object.\n *\n * @param {string}                     opts.method - Method name to invoke.\n *\n * @param {import('../../').PluginManager}              opts.manager - A plugin manager instance.\n *\n * @param {object}                     [opts.copyProps] - Properties that are copied.\n *\n * @param {object}                     [opts.passthruProps] - Properties that are passed through.\n *\n * @param {string|Iterable<string>}    [opts.plugins] - Specific plugin name or iterable list of plugin names to invoke.\n *\n * @param {object}                     [opts.options] - Defines options for throwing exceptions. Turned off by default.\n *\n * @param {boolean}                    [opts.errorCheck=true] - If false optional error checking is disabled.\n *\n * @returns {Promise<import('../../').PluginEventData>} The PluginEvent data.\n */\nasync function invokeAsyncEvent({ method, manager, copyProps = {}, passthruProps = {}, plugins = void 0,\n options = void 0, errorCheck = true })\n{\n   if (typeof method !== 'string') { throw new TypeError(`'method' is not a string.`); }\n   if (typeof passthruProps !== 'object') { throw new TypeError(`'passthruProps' is not an object.`); }\n   if (typeof copyProps !== 'object') { throw new TypeError(`'copyProps' is not an object.`); }\n\n   if (options === void 0) { options = manager.getOptions(); }\n   if (plugins === void 0) { plugins = manager.getPluginMapKeys(); }\n\n   if (typeof plugins !== 'string' && !isIterable(plugins))\n   {\n      throw new TypeError(`'plugins' is not a string or iterable.`);\n   }\n\n   // Track how many plugins were invoked.\n   let pluginInvokeCount = 0;\n   const pluginInvokeNames = [];\n\n   // Track if a plugin method is invoked\n   let hasMethod = false;\n   let hasPlugin = false;\n\n   // Create plugin event.\n   const ev = new PluginInvokeEvent(copyProps, passthruProps);\n\n   const results = [];\n\n   if (typeof plugins === 'string')\n   {\n      const entry = manager.getPluginEntry(plugins);\n\n      if (entry !== void 0 && entry.enabled && entry.instance)\n      {\n         hasPlugin = true;\n\n         if (typeof entry.instance[method] === 'function')\n         {\n            ev.eventbus = entry.eventbusProxy;\n            ev.pluginName = entry.name;\n            ev.pluginOptions = entry.data.plugin.options;\n\n            const result = entry.instance[method](ev);\n\n            if (typeof result !== 'undefined' && result !== null) { results.push(result); }\n\n            hasMethod = true;\n            pluginInvokeCount++;\n            pluginInvokeNames.push(entry.name);\n         }\n      }\n   }\n   else\n   {\n      for (const name of plugins)\n      {\n         const entry = manager.getPluginEntry(name);\n\n         if (entry !== void 0 && entry.enabled && entry.instance)\n         {\n            hasPlugin = true;\n\n            if (typeof entry.instance[method] === 'function')\n            {\n               ev.eventbus = entry.eventbusProxy;\n               ev.pluginName = entry.name;\n               ev.pluginOptions = entry.data.plugin.options;\n\n               const result = entry.instance[method](ev);\n\n               if (typeof result !== 'undefined' && result !== null) { results.push(result); }\n\n               hasMethod = true;\n               pluginInvokeCount++;\n               pluginInvokeNames.push(entry.name);\n            }\n         }\n      }\n   }\n\n   if (errorCheck && options.throwNoPlugin && !hasPlugin)\n   {\n      throw new Error(`PluginManager failed to find any target plugins.`);\n   }\n\n   if (errorCheck && options.throwNoMethod && !hasMethod)\n   {\n      throw new Error(`PluginManager failed to invoke '${method}'.`);\n   }\n\n   // Add meta data for plugin invoke count.\n   ev.data.$$plugin_invoke_count = pluginInvokeCount;\n   ev.data.$$plugin_invoke_names = pluginInvokeNames;\n\n   await Promise.all(results);\n\n   return ev.data;\n}\n\n/**\n * Private implementation to invoke synchronous events. This allows internal calls in PluginManager for\n * `onPluginLoad` and `onPluginUnload` callbacks to bypass optional error checking.\n *\n * This dispatch method synchronously passes to and returns from any invoked targets a PluginEvent.\n *\n * @param {object}                     opts - Options object.\n *\n * @param {string}                     opts.method - Method name to invoke.\n *\n * @param {import('../../').PluginManager}              opts.manager - A plugin manager instance.\n *\n * @param {object}                     [opts.copyProps] - Properties that are copied.\n *\n * @param {object}                     [opts.passthruProps] - Properties that are passed through.\n *\n * @param {string|Iterable<string>}    [opts.plugins] - Specific plugin name or iterable list of plugin names to invoke.\n *\n * @param {object}                     [opts.options] - Defines options for throwing exceptions. Turned off by default.\n *\n * @param {boolean}                    [opts.errorCheck=true] - If false optional error checking is disabled.\n *\n * @returns {import('../../').PluginEventData} The PluginEvent data.\n */\nfunction invokeSyncEvent({ method, manager, copyProps = {}, passthruProps = {}, plugins = void 0,\n options = void 0, errorCheck = true })\n{\n   if (typeof method !== 'string') { throw new TypeError(`'method' is not a string.`); }\n   if (typeof passthruProps !== 'object') { throw new TypeError(`'passthruProps' is not an object.`); }\n   if (typeof copyProps !== 'object') { throw new TypeError(`'copyProps' is not an object.`); }\n\n   if (options === void 0) { options = manager.getOptions(); }\n   if (plugins === void 0) { plugins = manager.getPluginMapKeys(); }\n\n   if (typeof plugins !== 'string' && !isIterable(plugins))\n   {\n      throw new TypeError(`'plugins' is not a string or iterable.`);\n   }\n\n   // Track how many plugins were invoked.\n   let pluginInvokeCount = 0;\n   const pluginInvokeNames = [];\n\n   // Track if a plugin method is invoked\n   let hasMethod = false;\n   let hasPlugin = false;\n\n   // Create plugin event.\n   const ev = new PluginInvokeEvent(copyProps, passthruProps);\n\n   if (typeof plugins === 'string')\n   {\n      const entry = manager.getPluginEntry(plugins);\n\n      if (entry !== void 0 && entry.enabled && entry.instance)\n      {\n         hasPlugin = true;\n\n         if (typeof entry.instance[method] === 'function')\n         {\n            ev.eventbus = entry.eventbusProxy;\n            ev.pluginName = entry.name;\n            ev.pluginOptions = entry.data.plugin.options;\n\n            entry.instance[method](ev);\n\n            hasMethod = true;\n            pluginInvokeCount++;\n            pluginInvokeNames.push(entry.name);\n         }\n      }\n   }\n   else\n   {\n      for (const name of plugins)\n      {\n         const entry = manager.getPluginEntry(name);\n\n         if (entry !== void 0 && entry.enabled && entry.instance)\n         {\n            hasPlugin = true;\n\n            if (typeof entry.instance[method] === 'function')\n            {\n               ev.eventbus = entry.eventbusProxy;\n               ev.pluginName = entry.name;\n               ev.pluginOptions = entry.data.plugin.options;\n\n               entry.instance[method](ev);\n\n               hasMethod = true;\n               pluginInvokeCount++;\n               pluginInvokeNames.push(entry.name);\n            }\n         }\n      }\n   }\n\n   if (errorCheck && options.throwNoPlugin && !hasPlugin)\n   {\n      throw new Error(`PluginManager failed to find any target plugins.`);\n   }\n\n   if (errorCheck && options.throwNoMethod && !hasMethod)\n   {\n      throw new Error(`PluginManager failed to invoke '${method}'.`);\n   }\n\n   // Add meta data for plugin invoke count.\n   ev.data.$$plugin_invoke_count = pluginInvokeCount;\n   ev.data.$$plugin_invoke_names = pluginInvokeNames;\n\n   return ev.data;\n}\n\n/**\n * @typedef {import('../../interfaces').PluginSupportImpl} MyInterface\n */\n\n/**\n * PluginInvokeSupport adds direct method invocation support to PluginManager via the eventbus and alternately through\n * a wrapped instance of PluginManager depending on the use case.\n *\n * There are two types of invocation methods the first spreads an array of arguments to the invoked method. The second\n * constructs a {@link PluginInvokeEvent} to pass to the method with a single parameter.\n *\n * TODO: more info and wiki link\n *\n * When added to a PluginManager through constructor initialization the following events are registered on the plugin\n * manager eventbus:\n *\n * `plugins:async:invoke` - {@link PluginInvokeSupport#invokeAsync}\n *\n * `plugins:async:invoke:event` - {@link PluginInvokeSupport#invokeAsyncEvent}\n *\n * `plugins:get:method:names` - {@link PluginInvokeSupport#getMethodNames}\n *\n * `plugins:has:method` - {@link PluginInvokeSupport#hasMethod}\n *\n * `plugins:invoke` - {@link PluginInvokeSupport#invoke}\n *\n * `plugins:sync:invoke` - {@link PluginInvokeSupport#invokeSync}\n *\n * `plugins:sync:invoke:event` - {@link PluginInvokeSupport#invokeSyncEvent}\n *\n * @example\n * ```js\n * // One can also indirectly invoke any method of the plugin.\n * // Any plugin with a method named `aCoolMethod` is invoked.\n * eventbus.triggerSync('plugins:invoke:sync:event', { method: 'aCoolMethod' });\n *\n * // A specific invocation just for the 'an-npm-plugin-enabled-module'\n * eventbus.triggerSync('plugins:invoke:sync:event', {\n *    method: 'aCoolMethod',\n *    plugins: 'an-npm-plugin-enabled-module'\n * });\n *\n * // There are two other properties `copyProps` and `passthruProps` which can be set with object data to _copy_ or\n * // _pass through_ to the invoked method.\n * ```\n *\n * @implements {MyInterface}\n */\nclass PluginInvokeSupport\n{\n   /**\n    * @type {import('../..').PluginManager}\n    */\n   #pluginManager = null;\n\n   /**\n    * Create PluginInvokeSupport\n    *\n    * @param {import('../..').PluginManager} pluginManager - The plugin manager to associate.\n    */\n   constructor(pluginManager)\n   {\n      this.#pluginManager = pluginManager;\n   }\n\n   /**\n    * Returns whether the associated plugin manager has been destroyed.\n    *\n    * @returns {boolean} Returns whether the plugin manager has been destroyed.\n    */\n   get isDestroyed()\n   {\n      return this.#pluginManager === null || this.#pluginManager.isDestroyed;\n   }\n\n   /**\n    * Returns the associated plugin manager options.\n    *\n    * @returns {import('../../').PluginManagerOptions} The associated plugin manager options.\n    */\n   get options()\n   {\n      /* c8 ignore next 1 */\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      return this.#pluginManager.getOptions();\n   }\n\n   /**\n    * Gets the associated plugin manager.\n    *\n    * @returns {import('../../').PluginManager} The associated plugin manager\n    */\n   get pluginManager()\n   {\n      /* c8 ignore next 1 */\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      return this.#pluginManager;\n   }\n\n   /**\n    * Destroys all managed plugins after unloading them.\n    *\n    * @param {object}     opts - An options object.\n    *\n    * @param {import('#manager/eventbus').Eventbus}   opts.eventbus - The eventbus to disassociate.\n    *\n    * @param {string}     opts.eventPrepend - The current event prepend.\n    */\n   async destroy({ eventbus, eventPrepend })\n   {\n      if (eventbus !== null && eventbus !== void 0)\n      {\n         eventbus.off(`${eventPrepend}:async:invoke`, this.invokeAsync, this);\n         eventbus.off(`${eventPrepend}:async:invoke:event`, this.invokeAsyncEvent, this);\n         eventbus.off(`${eventPrepend}:get:method:names`, this.getMethodNames, this);\n         eventbus.off(`${eventPrepend}:has:method`, this.hasMethod, this);\n         eventbus.off(`${eventPrepend}:invoke`, this.invoke, this);\n         eventbus.off(`${eventPrepend}:sync:invoke`, this.invokeSync, this);\n         eventbus.off(`${eventPrepend}:sync:invoke:event`, this.invokeSyncEvent, this);\n      }\n\n      this.#pluginManager = null;\n   }\n\n   /**\n    * Returns method names for a specific plugin, list of plugins, or all plugins. The enabled state can be specified\n    * along with sorting methods by plugin name.\n    *\n    * @param {object}                  [opts] - Options object. If undefined all plugin data is returned.\n    *\n    * @param {boolean}                 [opts.enabled] - If enabled is a boolean it will return plugin methods names\n    *                                                   given the respective enabled state.\n    *\n    * @param {string|Iterable<string>} [opts.plugins] - Plugin name or iterable list of names.\n    *\n    * @returns {string[]} A list of method names\n    */\n   getMethodNames({ enabled = void 0, plugins = [] } = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (enabled !== void 0 && typeof enabled !== 'boolean')\n      {\n         throw new TypeError(`'enabled' is not a boolean.`);\n      }\n\n      if (typeof plugins !== 'string' && !isIterable(plugins))\n      {\n         throw new TypeError(`'plugins' is not a string or iterable.`);\n      }\n\n      // Create an array from a single plugin name.\n      if (typeof plugins === 'string')\n      {\n         plugins = [plugins];\n      }\n\n      const anyEnabledState = enabled === void 0;\n\n      const results = {};\n\n      let count = 0;\n\n      for (const name of plugins)\n      {\n         const entry = this.pluginManager.getPluginEntry(name);\n\n         if (entry !== void 0 && entry.instance && (anyEnabledState || entry.enabled === enabled))\n         {\n            for (const name of s_GET_ALL_PROPERTY_NAMES(entry.instance))\n            {\n               // Skip any names that are not a function or are the constructor.\n               if (typeof entry.instance[name] === 'function' && name !== 'constructor') { results[name] = true; }\n            }\n         }\n\n         count++;\n      }\n\n      // Iterable plugins had no entries so return all plugin data.\n      if (count === 0)\n      {\n         for (const entry of this.pluginManager.getPluginMapValues())\n         {\n            if (entry.instance && (anyEnabledState || entry.enabled === enabled))\n            {\n               for (const name of s_GET_ALL_PROPERTY_NAMES(entry.instance))\n               {\n                  // Skip any names that are not a function or are the constructor.\n                  if (typeof entry.instance[name] === 'function' && name !== 'constructor') { results[name] = true; }\n               }\n            }\n         }\n      }\n\n      return Object.keys(results).sort();\n   }\n\n   /**\n    * Checks if the provided method name exists across all plugins or specific plugins if defined.\n    *\n    * @param {object}                  opts - Options object.\n    *\n    * @param {string}                  opts.method - Method name to test.\n    *\n    * @param {string|Iterable<string>} [opts.plugins] - Plugin name or iterable list of names to check for method. If\n    *                                                   undefined all plugins must contain the method.\n    *\n    * @returns {boolean} - True method is found.\n    */\n   hasMethod({ method, plugins = [] })\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof method !== 'string')\n      {\n         throw new TypeError(`'method' is not a string.`);\n      }\n\n      if (typeof plugins !== 'string' && !isIterable(plugins))\n      {\n         throw new TypeError(`'plugins' is not a string or iterable.`);\n      }\n\n      // Return a single boolean enabled result for a single plugin if found.\n      if (typeof plugins === 'string')\n      {\n         const entry = this.pluginManager.getPluginEntry(plugins);\n         return entry !== void 0 && typeof entry.instance[method] === 'function';\n      }\n\n      let count = 0;\n\n      for (const name of plugins)\n      {\n         const entry = this.pluginManager.getPluginEntry(name);\n\n         if (entry !== void 0 && typeof entry.instance[method] !== 'function') { return false; }\n\n         count++;\n      }\n\n      // Iterable plugins had no entries so check all plugin data.\n      if (count === 0)\n      {\n         for (const entry of this.pluginManager.getPluginMapValues())\n         {\n            if (typeof entry.instance[method] !== 'function') { return false; }\n         }\n      }\n\n      return true;\n   }\n\n   /**\n    * This dispatch method simply invokes any plugin targets for the given method name.\n    *\n    * @param {object}   opts - Options object.\n    *\n    * @param {string}   opts.method - Method name to invoke.\n    *\n    * @param {*[]}      [opts.args] - Method arguments. This array will be spread as multiple arguments.\n    *\n    * @param {string|Iterable<string>} [opts.plugins] - Specific plugin name or iterable list of plugin names to invoke.\n    */\n   invoke({ method, args = void 0, plugins = void 0 })\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof method !== 'string') { throw new TypeError(`'method' is not a string.`); }\n\n      if (args !== void 0 && !Array.isArray(args)) { throw new TypeError(`'args' is not an array.`); }\n\n      if (plugins === void 0) { plugins = this.pluginManager.getPluginMapKeys(); }\n\n      if (typeof plugins !== 'string' && !isIterable(plugins))\n      {\n         throw new TypeError(`'plugins' is not a string or iterable.`);\n      }\n\n      // Track if a plugin method is invoked.\n      let hasMethod = false;\n      let hasPlugin = false;\n\n      const isArgsArray = Array.isArray(args);\n\n      if (typeof plugins === 'string')\n      {\n         const entry = this.pluginManager.getPluginEntry(plugins);\n\n         if (entry !== void 0 && entry.enabled && entry.instance)\n         {\n            hasPlugin = true;\n\n            if (typeof entry.instance[method] === 'function')\n            {\n               isArgsArray ? entry.instance[method](...args) : entry.instance[method]();\n\n               hasMethod = true;\n            }\n         }\n      }\n      else\n      {\n         for (const name of plugins)\n         {\n            const entry = this.pluginManager.getPluginEntry(name);\n\n            if (entry !== void 0 && entry.enabled && entry.instance)\n            {\n               hasPlugin = true;\n\n               if (typeof entry.instance[method] === 'function')\n               {\n                  isArgsArray ? entry.instance[method](...args) : entry.instance[method]();\n\n                  hasMethod = true;\n               }\n            }\n         }\n      }\n\n      if (this.options.throwNoPlugin && !hasPlugin)\n      {\n         throw new Error(`PluginManager failed to find any target plugins.`);\n      }\n\n      if (this.options.throwNoMethod && !hasMethod)\n      {\n         throw new Error(`PluginManager failed to invoke '${method}'.`);\n      }\n   }\n\n   /**\n    * This dispatch method is asynchronous and adds any returned results to an array which is resolved via Promise.all\n    * Any target invoked may return a Promise or any result.\n    *\n    * @param {object}   opts - Options object.\n    *\n    * @param {string}   opts.method - Method name to invoke.\n    *\n    * @param {*[]}      [opts.args] - Method arguments. This array will be spread as multiple arguments.\n    *\n    * @param {string|Iterable<string>} [opts.plugins] - Specific plugin name or iterable list of plugin names to invoke.\n    *\n    * @returns {Promise<*|*[]>} A single result or array of results.\n    */\n   async invokeAsync({ method, args = void 0, plugins = void 0 })\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof method !== 'string') { throw new TypeError(`'method' is not a string.`); }\n\n      if (args !== void 0 && !Array.isArray(args)) { throw new TypeError(`'args' is not an array.`); }\n\n      if (plugins === void 0) { plugins = this.pluginManager.getPluginMapKeys(); }\n\n      if (typeof plugins !== 'string' && !isIterable(plugins))\n      {\n         throw new TypeError(`'plugins' is not a string or iterable.`);\n      }\n\n      // Track if a plugin method is invoked.\n      let hasMethod = false;\n      let hasPlugin = false;\n\n      // Capture results.\n      let result = void 0;\n      const results = [];\n\n      const isArgsArray = Array.isArray(args);\n\n      if (typeof plugins === 'string')\n      {\n         const plugin = this.pluginManager.getPluginEntry(plugins);\n\n         if (plugin !== void 0 && plugin.enabled && plugin.instance)\n         {\n            hasPlugin = true;\n\n            if (typeof plugin.instance[method] === 'function')\n            {\n               result = isArgsArray ? plugin.instance[method](...args) : plugin.instance[method]();\n\n               // If we received a valid result push it to the results.\n               if (result !== void 0) { results.push(result); }\n\n               hasMethod = true;\n            }\n         }\n      }\n      else\n      {\n         for (const name of plugins)\n         {\n            const plugin = this.pluginManager.getPluginEntry(name);\n\n            if (plugin !== void 0 && plugin.enabled && plugin.instance)\n            {\n               hasPlugin = true;\n\n               if (typeof plugin.instance[method] === 'function')\n               {\n                  result = isArgsArray ? plugin.instance[method](...args) : plugin.instance[method]();\n\n                  // If we received a valid result push it to the results.\n                  if (result !== void 0) { results.push(result); }\n\n                  hasMethod = true;\n               }\n            }\n         }\n      }\n\n      if (this.options.throwNoPlugin && !hasPlugin)\n      {\n         throw new Error(`PluginManager failed to find any target plugins.`);\n      }\n\n      if (this.options.throwNoMethod && !hasMethod)\n      {\n          throw new Error(`PluginManager failed to invoke '${method}'.`);\n      }\n\n      // If there are multiple results then use Promise.all otherwise Promise.resolve.\n      return results.length > 1 ? Promise.all(results).then((values) =>\n      {\n         const filtered = values.filter((entry) => entry !== void 0);\n         switch (filtered.length)\n         {\n            case 0: return void 0;\n            case 1: return filtered[0];\n            default: return filtered;\n         }\n      }) : result;\n   }\n\n   /**\n    * This dispatch method synchronously passes to and returns from any invoked targets a PluginEvent.\n    *\n    * @param {object}   opts - Options object.\n    *\n    * @param {string}   opts.method - Method name to invoke.\n    *\n    * @param {object}   [opts.copyProps] - Properties that are copied.\n    *\n    * @param {object}   [opts.passthruProps] - Properties that are passed through.\n    *\n    * @param {string | Iterable<string>} [opts.plugins] - Specific plugin name or iterable list of plugin names to invoke.\n    *\n    * @returns {Promise<import('../../').PluginEventData>} The PluginEvent data.\n    */\n   async invokeAsyncEvent({ method, copyProps = {}, passthruProps = {}, plugins = void 0 })\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      // Invokes the private internal async events method.\n      return invokeAsyncEvent({ method, manager: this.pluginManager, copyProps, passthruProps, plugins });\n   }\n\n   /**\n    * This dispatch method synchronously passes back a single value or an array with all results returned by any\n    * invoked targets.\n    *\n    * @param {object}   opts - Options object.\n    *\n    * @param {string}   opts.method - Method name to invoke.\n    *\n    * @param {*[]}      [opts.args] - Method arguments. This array will be spread as multiple arguments.\n    *\n    * @param {string|Iterable<string>} [opts.plugins] - Specific plugin name or iterable list of plugin names to invoke.\n    *\n    * @returns {*|*[]} A single result or array of results.\n    */\n   invokeSync({ method, args = void 0, plugins = void 0 })\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof method !== 'string') { throw new TypeError(`'method' is not a string.`); }\n\n      if (args !== void 0 && !Array.isArray(args)) { throw new TypeError(`'args' is not an array.`); }\n\n      if (plugins === void 0) { plugins = this.pluginManager.getPluginMapKeys(); }\n\n      if (typeof plugins !== 'string' && !isIterable(plugins))\n      {\n         throw new TypeError(`'plugins' is not a string or iterable.`);\n      }\n\n      // Track if a plugin method is invoked.\n      let hasMethod = false;\n      let hasPlugin = false;\n\n      // Capture results.\n      let result = void 0;\n      const results = [];\n\n      const isArgsArray = Array.isArray(args);\n\n      if (typeof plugins === 'string')\n      {\n         const plugin = this.pluginManager.getPluginEntry(plugins);\n\n         if (plugin !== void 0 && plugin.enabled && plugin.instance)\n         {\n            hasPlugin = true;\n\n            if (typeof plugin.instance[method] === 'function')\n            {\n               result = isArgsArray ? plugin.instance[method](...args) : plugin.instance[method]();\n\n               // If we received a valid result push it to the results.\n               if (result !== void 0) { results.push(result); }\n\n               hasMethod = true;\n            }\n         }\n      }\n      else\n      {\n         for (const name of plugins)\n         {\n            const plugin = this.pluginManager.getPluginEntry(name);\n\n            if (plugin !== void 0 && plugin.enabled && plugin.instance)\n            {\n               hasPlugin = true;\n\n               if (typeof plugin.instance[method] === 'function')\n               {\n                  result = isArgsArray ? plugin.instance[method](...args) : plugin.instance[method]();\n\n                  // If we received a valid result push it to the results.\n                  if (result !== void 0) { results.push(result); }\n\n                  hasMethod = true;\n               }\n            }\n         }\n      }\n\n      if (this.options.throwNoPlugin && !hasPlugin)\n      {\n         throw new Error(`PluginManager failed to find any target plugins.`);\n      }\n\n      if (this.options.throwNoMethod && !hasMethod)\n      {\n         throw new Error(`PluginManager failed to invoke '${method}'.`);\n      }\n\n      // Return the results array if there are more than one or just a single result.\n      return results.length > 1 ? results : result;\n   }\n\n   /**\n    * This dispatch method synchronously passes to and returns from any invoked targets a PluginEvent.\n    *\n    * @param {object}            opts - Options object.\n    *\n    * @param {string}            opts.method - Method name to invoke.\n    *\n    * @param {object}            [opts.copyProps] - Properties that are copied.\n    *\n    * @param {object}            [opts.passthruProps] - Properties that are passed through.\n    *\n    * @param {string|Iterable<string>} [opts.plugins] - Specific plugin name or iterable list of plugin names to invoke.\n    *\n    * @returns {import('../../').PluginEventData} The PluginEvent data.\n    */\n   invokeSyncEvent({ method, copyProps = {}, passthruProps = {}, plugins = void 0 })\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      // Invokes the private internal sync events method.\n      return invokeSyncEvent({ method, manager: this.pluginManager, copyProps, passthruProps, plugins });\n   }\n\n   /**\n    * Sets the eventbus associated with this plugin manager. If any previous eventbus was associated all plugin manager\n    * events will be removed then added to the new eventbus. If there are any existing plugins being managed their\n    * events will be removed from the old eventbus and then `onPluginLoad` will be called with the new eventbus.\n    *\n    * @param {object}     opts - An options object.\n    *\n    * @param {import('#manager/eventbus').Eventbus}   opts.oldEventbus - The old eventbus to disassociate.\n    *\n    * @param {import('#manager/eventbus').Eventbus}   opts.newEventbus - The new eventbus to associate.\n    *\n    * @param {string}     opts.oldPrepend - The old event prepend.\n    *\n    * @param {string}     opts.newPrepend - The new event prepend.\n    */\n   setEventbus({ oldEventbus, newEventbus, oldPrepend, newPrepend })\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (oldEventbus !== null && oldEventbus !== void 0)\n      {\n         oldEventbus.off(`${oldPrepend}:async:invoke`, this.invokeAsync, this);\n         oldEventbus.off(`${oldPrepend}:async:invoke:event`, this.invokeAsyncEvent, this);\n         oldEventbus.off(`${oldPrepend}:get:method:names`, this.getMethodNames, this);\n         oldEventbus.off(`${oldPrepend}:has:method`, this.hasMethod, this);\n         oldEventbus.off(`${oldPrepend}:invoke`, this.invoke, this);\n         oldEventbus.off(`${oldPrepend}:sync:invoke`, this.invokeSync, this);\n         oldEventbus.off(`${oldPrepend}:sync:invoke:event`, this.invokeSyncEvent, this);\n      }\n\n      if (newEventbus !== null && newEventbus !== void 0)\n      {\n         newEventbus.on(`${newPrepend}:async:invoke`, this.invokeAsync, this, { guard: true });\n         newEventbus.on(`${newPrepend}:async:invoke:event`, this.invokeAsyncEvent, this, { guard: true });\n         newEventbus.on(`${newPrepend}:get:method:names`, this.getMethodNames, this, { guard: true });\n         newEventbus.on(`${newPrepend}:has:method`, this.hasMethod, this, { guard: true });\n         newEventbus.on(`${newPrepend}:invoke`, this.invoke, this, { guard: true });\n         newEventbus.on(`${newPrepend}:sync:invoke`, this.invokeSync, this, { guard: true });\n         newEventbus.on(`${newPrepend}:sync:invoke:event`, this.invokeSyncEvent, this, { guard: true });\n      }\n   }\n\n   /**\n    * Set optional parameters.\n    *\n    * @param {import('../../').PluginManagerOptions} options Defines optional parameters to set.\n    */\n   setOptions(options)  // eslint-disable-line no-unused-vars\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n   }\n}\n\n// Module Private ----------------------------------------------------------------------------------------------------\n\n/**\n * Walks an objects inheritance tree collecting property names stopping before `Object` is reached.\n *\n * @param {object}   obj - object to walks.\n *\n * @returns {string[]} A list of property names.\n * @ignore\n */\nconst s_GET_ALL_PROPERTY_NAMES = (obj) =>\n{\n   const props = [];\n\n   do\n   {\n      Object.getOwnPropertyNames(obj).forEach((prop) => { if (props.indexOf(prop) === -1) { props.push(prop); } });\n      obj = Object.getPrototypeOf(obj);\n   } while (obj !== void 0 && obj !== null && !(obj === Object.prototype));\n\n   return props;\n};\n\nconst s_REGEX_ESCAPE_RELATIVE = /^([.]{1,2}[\\\\|/])+/g;\nconst s_REGEX_ESCAPE_FORWARD = /[\\\\]/g;\nconst s_REGEX_STRING_URL = /^(https?|file):/g;\n\n/**\n * Creates an escaped path which is suitable for use in RegExp construction.\n *\n * Note: This function will throw if a malformed URL string is the target. In AbstractPluginManager this function\n * is used after the module has been loaded / is a good target.\n *\n * @param {string|URL}  target - Target full / relative path or URL to escape.\n *\n * @returns {string} The escaped target.\n */\nfunction escapeTarget(target)\n{\n   if (typeof target !== 'string' && !(target instanceof URL))\n   {\n      throw new TypeError(`'target' is not a string or URL.`);\n   }\n\n   /** @type {string} */\n   let targetEscaped = typeof target === 'string' ? target : void 0;\n\n   if (target instanceof URL)\n   {\n      targetEscaped = target.pathname;\n   }\n   else if (target.match(s_REGEX_STRING_URL))\n   {\n      targetEscaped = new URL(target).pathname;\n   }\n\n   targetEscaped = targetEscaped.replace(s_REGEX_ESCAPE_RELATIVE, '');\n   targetEscaped = targetEscaped.replace(s_REGEX_ESCAPE_FORWARD, '\\\\\\\\');\n\n   return targetEscaped;\n}\n\n/**\n * Performs validation of a PluginConfig.\n *\n * @param {import('..').PluginConfig}   pluginConfig A PluginConfig to validate.\n *\n * @returns {boolean} True if the given PluginConfig is valid.\n */\nfunction isValidConfig(pluginConfig)\n{\n   if (typeof pluginConfig !== 'object') { return false; }\n\n   if (typeof pluginConfig.name !== 'string') { return false; }\n\n   if (typeof pluginConfig.target !== 'undefined' && typeof pluginConfig.target !== 'string' &&\n    !(pluginConfig.target instanceof URL))\n   {\n      return false;\n   }\n\n   if (typeof pluginConfig.options !== 'undefined' && typeof pluginConfig.options !== 'object') { return false; }\n\n   return true;\n}\n\n/**\n * Resolves a dynamically imported module for PluginManager. This function is passed to `@typhonjs-utils/loader-module`.\n *\n * @param {object}   module - The imported module.\n *\n * @returns {*} The export most likely to match a valid plugin.\n */\nfunction resolveModule(module)\n{\n   // If the module has a named export for `onPluginLoad` then take the module.\n   if (typeof module.onPluginLoad === 'function')\n   {\n      return module;\n   }\n   // Then potentially resolve any default export / static class.\n   else if (module.default)\n   {\n      return module.default;\n   }\n   // Finally resolve as just the module.\n   else\n   {\n      return module;\n   }\n}\n\n/**\n * Provides a lightweight plugin manager for Node / NPM & the browser with eventbus integration for plugins in a safe\n * and protected manner across NPM modules, local files, and preloaded object instances. This pattern facilitates\n * message passing between modules versus direct dependencies / method invocation.\n *\n * A default eventbus will be created, but you may also pass in an eventbus from `@typhonjs-plugin/eventbus` and the\n * plugin manager will register by default under these event categories:\n *\n * `plugins:async:add` - {@link PluginManager#add}\n *\n * `plugins:async:add:all` - {@link PluginManager#addAll}\n *\n * `plugins:async:destroy:manager` - {@link PluginManager#destroy}\n *\n * `plugins:async:remove` - {@link PluginManager#remove}\n *\n * `plugins:async:remove:all` - {@link PluginManager#removeAll}\n *\n * `plugins:get:enabled` - {@link PluginManager#getEnabled}\n *\n * `plugins:get:options` - {@link PluginManager#getOptions}\n *\n * `plugins:get:plugin:by:event` - {@link PluginManager#getPluginByEvent}\n *\n * `plugins:get:plugin:data` - {@link PluginManager#getPluginData}\n *\n * `plugins:get:plugin:events` - {@link PluginManager#getPluginEvents}\n *\n * `plugins:get:plugin:names` - {@link PluginManager#getPluginNames}\n *\n * `plugins:has:plugin` - {@link PluginManager#hasPlugins}\n *\n * `plugins:is:valid:config` - {@link PluginManager#isValidConfig}\n *\n * `plugins:set:enabled` - {@link PluginManager#setEnabled}\n *\n * `plugins:set:options` - {@link PluginManager#setOptions}\n *\n * Automatically when a plugin is loaded and unloaded respective functions `onPluginLoad` and `onPluginUnload` will\n * be attempted to be invoked on the plugin. This is an opportunity for the plugin to receive any associated eventbus\n * and wire itself into it. It should be noted that a protected proxy around the eventbus is passed to the plugins\n * such that when the plugin is removed automatically all events registered on the eventbus are cleaned up without\n * a plugin author needing to do this manually in the `onPluginUnload` callback. This solves any dangling event binding\n * issues.\n *\n * By supporting ES Modules / CommonJS in Node and ES Modules in the browser the plugin manager is by nature\n * asynchronous for the core methods of adding / removing plugins and destroying the manager. The lifecycle methods\n * `onPluginLoad` and `onPluginUnload` will be awaited on such that if a plugin returns a Promise or is an async method\n * then it will complete before execution continues.\n *\n * It is recommended to interact with the plugin manager eventbus through an eventbus proxy. The\n * `createEventbusProxy` method will return a proxy to the default or currently set eventbus.\n *\n * It should be noted that this module re-exports `@typhonjs-plugin/eventbus` which is available as named exports via\n * the `eventbus` subpath export:\n * ```js\n * // Main Eventbus implementations:\n * import { Eventbus, EventbusProxy, EventbusSecure } from '@typhonjs-plugin/manager/eventbus';\n *\n * // Consistent bus instances useful for testing and broad accessibility:\n * import { mainEventbus, pluginEventbus, testEventbus } from '@typhonjs-plugin/manager/eventbus/buses';\n * ```\n *\n * This reexport is for convenience as it provides one single distribution for Node & browser usage.\n *\n * If external eventbus functionality is enabled by passing in an eventbus in the constructor of PluginManager it is\n * important especially if using an existing process / global level eventbus instance from either this module or\n * `@typhonjs-plugin/eventbus` to call {@link PluginManager#destroy} to clean up all plugin eventbus resources and the\n * plugin manager event bindings; this is primarily a testing concern when running repeated tests over a reused\n * eventbus.\n *\n * For more information on Eventbus functionality please see:\n *\n * @see https://www.npmjs.com/package/@typhonjs-plugin/eventbus\n *\n * The PluginManager instance can be extended through runtime composition by passing in _classes_ that implement\n * {@link PluginSupportImpl}. One such implementation is available {@link PluginInvokeSupport} which enables directly\n * invoking methods of all or specific plugins. Please see the documentation for PluginInvokeSupport for more details.\n *\n * Several abbreviated examples follow. Please see the wiki for more details:\n * TODO: add wiki link\n *\n * @example\n * import PluginManager from '@typhonjs-plugin/manager';\n *\n * const pluginManager = new PluginManager();\n *\n * await pluginManager.add({ name: 'an-npm-plugin-enabled-module' });\n * await pluginManager.add({ name: 'my-local-module', target: './myModule.js' });\n *\n * const eventbus = pluginManager.createEventbusProxy();\n *\n * // Let's say an-npm-plugin-enabled-module responds to 'cool:event' which returns 'true'.\n * // Let's say my-local-module responds to 'hot:event' which returns 'false'.\n * // Both of the plugin / modules will have 'onPluginLoaded' invoked with a proxy to the eventbus and any plugin\n * // options defined.\n *\n * // One can then use the eventbus functionality to invoke associated module / plugin methods even retrieving results.\n * assert(eventbus.triggerSync('cool:event') === true);\n * assert(eventbus.triggerSync('hot:event') === false);\n */\nclass PluginManager\n{\n   /**\n    * Stores the associated eventbus.\n    *\n    * @type {import('#manager/eventbus').Eventbus}\n    */\n   #eventbus = null;\n\n   /**\n    * Stores any EventbusProxy instances created, so that they may be automatically destroyed.\n    *\n    * @type {import('#manager/eventbus').EventbusProxy[]}\n    */\n   #eventbusProxies = [];\n\n   /**\n    * Stores any EventbusSecure instances created, so that they may be automatically destroyed.\n    *\n    * @type {import('#manager/eventbus').EventbusSecureObj[]}\n    */\n   #eventbusSecure = [];\n\n   /**\n    * Defines various options for the plugin manager. By default plugins are enabled, no event invoke, and no\n    * event set options are enabled; the latter two preventing invoke dispatch methods functioning on the eventbus\n    * along with not being able to set the plugin manager options by the eventbus. These must be explicitly turned\n    * off.\n    *\n    * @type {import('.').PluginManagerOptions}\n    */\n   #options =\n   {\n      noEventAdd: false,\n      noEventDestroy: true,\n      noEventRemoval: false,\n      noEventSetEnabled: true,\n      noEventSetOptions: true,\n      throwNoMethod: false,\n      throwNoPlugin: false\n   };\n\n   /**\n    * Stores the plugins currently being loaded by plugin name. During the add process this is important to track\n    * in cases when PluginManager is being used incorrectly in a non-async / await manner.\n    *\n    * @type {Set<string>}\n    */\n   #pluginAddSet = new Set();\n\n   /**\n    * Stores the plugins by name with an associated PluginEntry.\n    *\n    * @type {Map<string, import('./PluginEntry.js').PluginEntry>}\n    */\n   #pluginMap = new Map();\n\n   /**\n    * Provides an array of PluginSupportImpl interfaces to extend the plugin manager through the eventbus API.\n    *\n    * @type {import('./interfaces').PluginSupportImpl[]}\n    */\n   #pluginSupport = [];\n\n   /**\n    * Instantiates PluginManager\n    *\n    * @param {object}   [options] - Provides various configuration options:\n    *\n    * @param {import('#manager/eventbus').Eventbus} [options.eventbus] - An instance of '@typhonjs-plugin/eventbus'\n    *        used as the plugin eventbus. If not provided a default eventbus is created.\n    *\n    * @param {string}   [options.eventPrepend='plugin'] - A customized name to prepend PluginManager events on the\n    *                                                     eventbus.\n    *\n    * @param {import('.').PluginManagerOptions}  [options.manager] - The plugin manager options.\n    *\n    * @param {(\n    *    import('./interfaces').PluginSupportConstructor |\n    *    Iterable<import('./interfaces').PluginSupportConstructor>\n    * )} [options.PluginSupport] - Optional classes to pass in which extends the plugin manager. A default\n    * implementation is available: {@link PluginInvokeSupport}\n    */\n   constructor(options = {})\n   {\n      if (!isObject(options)) { throw new TypeError(`'options' is not an object.`); }\n\n      if (options.eventbus !== void 0 && !isObject(options.eventbus))\n      {\n         throw new TypeError(`'options.eventbus' is not an Eventbus.`);\n      }\n\n      if (options.eventPrepend !== void 0 && typeof options.eventPrepend !== 'string')\n      {\n         throw new TypeError(`'options.eventPrepend' is not a string.`);\n      }\n\n      if (options.manager !== void 0 && !isObject(options.manager))\n      {\n         throw new TypeError(`'options.manager' is not an object.`);\n      }\n\n      if (options.PluginSupport !== void 0 && typeof options.PluginSupport !== 'function' &&\n       !isIterable(options.PluginSupport))\n      {\n         throw new TypeError(\n          `'options.PluginSupport' must be a constructor function or iterable of such matching PluginSupportImpl.`);\n      }\n\n      // Instantiate any PluginSupport classes\n      if (isIterable(options.PluginSupport) && Symbol.iterator in options.PluginSupport)\n      {\n         for (const PluginSupport of options.PluginSupport)\n         {\n            this.#pluginSupport.push(new PluginSupport(this));\n         }\n      }\n      else if (options.PluginSupport !== void 0 && !(Symbol.iterator in options.PluginSupport))\n      {\n         const PluginSupport = options.PluginSupport;\n         this.#pluginSupport.push(new PluginSupport(this));\n      }\n\n      this.setOptions(options.manager || {});\n\n      this.setEventbus({\n         eventbus: options.eventbus !== void 0 ? options.eventbus : new Eventbus(),\n         eventPrepend: options.eventPrepend\n      });\n   }\n\n   /**\n    * Adds a plugin by the given configuration parameters. A plugin `name` is always required. If no other options\n    * are provided then the `name` doubles as the NPM module / local file to load. The loading first checks for an\n    * existing `instance` to use as the plugin. Then the `target` is chosen as the NPM module / local file to load.\n    * By passing in `options` this will be stored and accessible to the plugin during all callbacks.\n    *\n    * @param {import('.').PluginConfig}   pluginConfig - Defines the plugin to load.\n    *\n    * @param {object}         [moduleData] - Optional object hash to associate with plugin.\n    *\n    * @returns {Promise<import('.').PluginData>} The PluginData that represents the plugin added.\n    */\n   async add(pluginConfig, moduleData)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof pluginConfig !== 'object') { throw new TypeError(`'pluginConfig' is not an object.`); }\n\n      if (typeof pluginConfig.name !== 'string')\n      {\n         throw new TypeError(\n          `'pluginConfig.name' is not a string for entry:\\n${JSON.stringify(pluginConfig, null, 3)}`);\n      }\n\n      if (pluginConfig.target !== void 0 && typeof pluginConfig.target !== 'string' &&\n       !(pluginConfig.target instanceof URL))\n      {\n         throw new TypeError(\n          `'pluginConfig.target' is not a string or URL for entry:\\n${JSON.stringify(pluginConfig, null, 3)}`);\n      }\n\n      if (pluginConfig.options !== void 0 && typeof pluginConfig.options !== 'object')\n      {\n         throw new TypeError(\n          `'pluginConfig.options' is not an object for entry:\\n${JSON.stringify(pluginConfig, null, 3)}`);\n      }\n\n      if (moduleData !== void 0 && typeof moduleData !== 'object')\n      {\n         throw new TypeError(`'moduleData' is not an object for entry:\\n${JSON.stringify(pluginConfig, null, 3)}`);\n      }\n\n      // If a plugin with the same name already exists post a warning and exit early.\n      if (this.#pluginMap.has(pluginConfig.name))\n      {\n         throw new Error(`A plugin already exists with name: ${pluginConfig.name} for entry:\\n${\n          JSON.stringify(pluginConfig, null, 3)}`);\n      }\n\n      // If a plugin with the same name is also being currently loaded post a warning and exit early. This is the case\n      // when add is used without await and multiple plugins w/ the same name are being dynamically imported.\n      if (this.#pluginAddSet.has(pluginConfig.name))\n      {\n         throw new Error(`A plugin is already being loaded with name: ${pluginConfig.name} for entry:\\n${\n          JSON.stringify(pluginConfig, null, 3)}`);\n      }\n\n      this.#pluginAddSet.add(pluginConfig.name);\n\n      let instance, target, type;\n\n      // Use an existing instance of a plugin; a static class is assumed when instance is a function.\n      if (typeof pluginConfig.instance === 'object' || typeof pluginConfig.instance === 'function')\n      {\n         instance = pluginConfig.instance;\n\n         target = pluginConfig.name;\n\n         type = 'instance';\n      }\n      else\n      {\n         // If a target is defined use it instead of the name.\n         target = pluginConfig.target || pluginConfig.name;\n\n         try\n         {\n            const result = await ModuleLoader.load({ modulepath: target, resolveModule });\n\n            // Please note that a plugin or other logger must be setup on the associated eventbus.\n            if (this.#eventbus !== null)\n            {\n               this.#eventbus.trigger('log:debug',\n                `@typhonjs-plugin/manager - ${result.isESM ? 'import' : 'require'}: ${result.loadpath}`);\n            }\n\n            instance = result.instance;\n            type = result.type;\n         }\n         catch (err)\n         {\n            // Remove tracking of given plugin config name.\n            this.#pluginAddSet.delete(pluginConfig.name);\n\n            throw new Error(`@typhonjs-plugin/manager - Could not load target: ${target}\\n\\nPluginConfig:\\n` +\n             `${JSON.stringify(pluginConfig, null, 3)}\\n\\n${err}`);\n         }\n      }\n\n      // Convert any URL target a string.\n      if (target instanceof URL)\n      {\n         target = target.toString();\n      }\n\n      /**\n       * Create an object hash with data describing the plugin, manager, and any extra module data.\n       *\n       * @type {import('.').PluginData}\n       */\n      const pluginData = JSON.parse(JSON.stringify(\n      {\n         manager:\n         {\n            eventPrepend: this._eventPrepend,\n            scopedName: `${this._eventPrepend}:${pluginConfig.name}`\n         },\n\n         module: moduleData || {},\n\n         plugin:\n         {\n            name: pluginConfig.name,\n            target,\n            targetEscaped: escapeTarget(target),\n            type,\n            options: pluginConfig.options || {}\n         }\n      }));\n\n      deepFreeze(pluginData, ['manager']);\n\n      const eventbusProxy = this.#eventbus !== null && this.#eventbus !== void 0 ?\n       new EventbusProxy(this.#eventbus) /* c8 ignore next */ : void 0;\n\n      const entry = new PluginEntry(pluginConfig.name, pluginData, instance, eventbusProxy);\n\n      this.#pluginMap.set(pluginConfig.name, entry);\n      this.#pluginAddSet.delete(pluginConfig.name);\n\n      // Invokes the private internal async events method which allows skipping of error checking.\n      const invokeData = await invokeAsyncEvent({\n         method: 'onPluginLoad',\n         manager: this,\n         plugins: pluginConfig.name,\n         errorCheck: false\n      });\n\n      if (typeof invokeData.importmeta === 'object')\n      {\n         entry.importmeta = invokeData.importmeta;\n\n         // Until we get a Snowpack HMR spec environment for testing ignore this block.\n         /* c8 ignore next 7 */\n         if (typeof invokeData.importmeta.hot === 'object' && typeof invokeData.importmeta.hot.accept === 'function')\n         {\n            invokeData.importmeta.hot.accept(({ module }) =>\n            {\n               this.reload({ plugin: pluginConfig.name, instance: resolveModule(module) });\n            });\n         }\n      }\n\n      // Invoke `typhonjs:plugin:manager:plugin:added` allowing external code to react to plugin addition.\n      if (this.#eventbus)\n      {\n         await this.#eventbus.triggerAsync(`typhonjs:plugin:manager:plugin:added`, pluginData);\n      }\n\n      return pluginData;\n   }\n\n   /**\n    * Initializes multiple plugins in a single call.\n    *\n    * @param {Iterable<import('.').PluginConfig>}   pluginConfigs - An iterable list of plugin config object hash entries.\n    *\n    * @param {object}                   [moduleData] - Optional object hash to associate with all plugins.\n    *\n    * @returns {Promise<import('.').PluginData[]>} An array of PluginData objects of all added plugins.\n    */\n   async addAll(pluginConfigs, moduleData)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (!isIterable(pluginConfigs)) { throw new TypeError(`'pluginConfigs' is not iterable.`); }\n\n      const pluginsData = [];\n\n      for (const pluginConfig of pluginConfigs)\n      {\n         const result = await this.add(pluginConfig, moduleData);\n\n         if (result) { pluginsData.push(result); }\n      }\n\n      return pluginsData;\n   }\n\n   /**\n    * Provides the eventbus callback which may prevent addition if optional `noEventAdd` is enabled. This disables\n    * the ability for plugins to be added via events preventing any external code adding plugins in this manner.\n    *\n    * @param {import('.').PluginConfig}   pluginConfig - Defines the plugin to load.\n    *\n    * @param {object}         [moduleData] - Optional object hash to associate with all plugins.\n    *\n    * @returns {Promise<import('.').PluginData>} The PluginData that represents the plugin added.\n    * @private\n    */\n   async _addEventbus(pluginConfig, moduleData)\n   {\n      /* c8 ignore next */\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      return !this.#options.noEventAdd ? this.add(pluginConfig, moduleData) : void 0;\n   }\n\n   /**\n    * Provides the eventbus callback which may prevent addition if optional `noEventAdd` is enabled. This disables\n    * the ability for plugins to be added via events preventing any external code adding plugins in this manner.\n    *\n    * @param {Iterable<import('.').PluginConfig>}  pluginConfigs - An iterable list of plugin config object hash entries.\n    *\n    * @param {object}                  [moduleData] - Optional object hash to associate with all plugins.\n    *\n    * @returns {Promise<import('.').PluginData[]>} An array of PluginData objects of all added plugins.\n    * @private\n    */\n   async _addAllEventbus(pluginConfigs, moduleData)\n   {\n      /* c8 ignore next */\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      return !this.#options.noEventAdd ? this.addAll(pluginConfigs, moduleData) : [];\n   }\n\n   /**\n    * If an eventbus is assigned to this plugin manager then a new EventbusProxy wrapping this eventbus is returned.\n    * It is added to `this.#eventbusProxies` so †hat the instances are destroyed when the plugin manager is destroyed.\n    *\n    * @returns {import('#manager/eventbus').EventbusProxy} A proxy for the currently set Eventbus.\n    */\n   createEventbusProxy()\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      /* c8 ignore next */\n      if (this.#eventbus === null) { throw new ReferenceError('No eventbus assigned to plugin manager.'); }\n\n      const eventbusProxy = new EventbusProxy(this.#eventbus);\n\n      // Store proxy to make sure it is destroyed when the plugin manager is destroyed.\n      this.#eventbusProxies.push(eventbusProxy);\n\n      return eventbusProxy;\n   }\n\n   /**\n    * If an eventbus is assigned to this plugin manager then a new EventbusSecure wrapping this eventbus is returned.\n    * It is added to `this.#eventbusSecure` so †hat the instances are destroyed when the plugin manager is destroyed.\n    *\n    * @param {string}   [name] - Optional name for the EventbusSecure instance.\n    *\n    * @returns {import('#manager/eventbus').EventbusSecure} A secure wrapper for the currently set Eventbus.\n    */\n   createEventbusSecure(name = void 0)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      /* c8 ignore next */\n      if (this.#eventbus === null) { throw new ReferenceError('No eventbus assigned to plugin manager.'); }\n\n      const eventbusSecureObj = EventbusSecure.initialize(this.#eventbus, name);\n\n      // Store EventbusSecure object to make sure it is destroyed when the plugin manager is destroyed.\n      this.#eventbusSecure.push(eventbusSecureObj);\n\n      return eventbusSecureObj.eventbusSecure;\n   }\n\n   /**\n    * Destroys all managed plugins after unloading them.\n    *\n    * @returns {Promise<import('.').DataOutPluginRemoved[]>} A list of plugin names and removal success state.\n    */\n   async destroy()\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      // Remove all plugins; this will invoke onPluginUnload.\n      const results = await this.removeAll();\n\n      // Destroy any EventbusSecure instances created.\n      for (const eventbusSecureObj of this.#eventbusSecure)\n      {\n         eventbusSecureObj.destroy();\n      }\n\n      this.#eventbusSecure = [];\n\n      // Destroy any EventbusProxy instances created.\n      for (const eventbusProxy of this.#eventbusProxies)\n      {\n         eventbusProxy.destroy();\n      }\n\n      this.#eventbusProxies = [];\n\n      if (this.#eventbus !== null && this.#eventbus !== void 0)\n      {\n         this.#eventbus.off(`${this._eventPrepend}:async:add`, this._addEventbus, this);\n         this.#eventbus.off(`${this._eventPrepend}:async:add:all`, this._addAllEventbus, this);\n         this.#eventbus.off(`${this._eventPrepend}:async:destroy:manager`, this._destroyEventbus, this);\n         this.#eventbus.off(`${this._eventPrepend}:async:remove`, this._removeEventbus, this);\n         this.#eventbus.off(`${this._eventPrepend}:async:remove:all`, this._removeAllEventbus, this);\n         this.#eventbus.off(`${this._eventPrepend}:get:enabled`, this.getEnabled, this);\n         this.#eventbus.off(`${this._eventPrepend}:get:plugin:by:event`, this.getPluginByEvent, this);\n         this.#eventbus.off(`${this._eventPrepend}:get:plugin:data`, this.getPluginData, this);\n         this.#eventbus.off(`${this._eventPrepend}:get:plugin:events`, this.getPluginEvents, this);\n         this.#eventbus.off(`${this._eventPrepend}:get:plugin:names`, this.getPluginNames, this);\n         this.#eventbus.off(`${this._eventPrepend}:get:options`, this.getOptions, this);\n         this.#eventbus.off(`${this._eventPrepend}:has:plugin`, this.hasPlugins, this);\n         this.#eventbus.off(`${this._eventPrepend}:is:valid:config`, this.isValidConfig, this);\n         this.#eventbus.off(`${this._eventPrepend}:set:enabled`, this._setEnabledEventbus, this);\n         this.#eventbus.off(`${this._eventPrepend}:set:options`, this._setOptionsEventbus, this);\n      }\n\n      for (const pluginSupport of this.#pluginSupport)\n      {\n         await pluginSupport.destroy({ eventbus: this.#eventbus, eventPrepend: this._eventPrepend });\n      }\n\n      this.#pluginSupport = [];\n      this.#pluginMap = null;\n      this.#eventbus = null;\n\n      return results;\n   }\n\n   /**\n    * Provides the eventbus callback which may prevent plugin manager destruction if optional `noEventDestroy` is\n    * enabled. This disables the ability for the plugin manager to be destroyed via events preventing any external\n    * code removing plugins in this manner.\n    *\n    * @private\n    * @returns {Promise<import('.').DataOutPluginRemoved[]>} A list of plugin names and removal success state.\n    */\n   async _destroyEventbus()\n   {\n      /* c8 ignore next */\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      return !this.#options.noEventDestroy ? this.destroy() : [];\n   }\n\n   /**\n    * Returns whether this plugin manager has been destroyed.\n    *\n    * @returns {boolean} Returns whether this plugin manager has been destroyed.\n    */\n   get isDestroyed()\n   {\n      return this.#pluginMap === null || this.#pluginMap === void 0;\n   }\n\n   /**\n    * Returns the enabled state of a plugin, a list of plugins, or all plugins.\n    *\n    * @param {object}                  [opts] - Options object. If undefined all plugin enabled state is returned.\n    *\n    * @param {string|Iterable<string>} [opts.plugins] - Plugin name or iterable list of names to get state.\n    *\n    * @returns {boolean|import('.').DataOutPluginEnabled[]} Enabled state for single plugin or array of results for multiple\n    *                                                plugins.\n    */\n   getEnabled({ plugins = [] } = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof plugins !== 'string' && !isIterable(plugins))\n      {\n         throw new TypeError(`'plugins' is not a string or iterable.`);\n      }\n\n      // Return a single boolean enabled result for a single plugin if found.\n      if (typeof plugins === 'string')\n      {\n         const entry = this.#pluginMap.get(plugins);\n         return entry !== void 0 && entry.enabled;\n      }\n\n      const results = [];\n\n      let count = 0;\n\n      for (const plugin of plugins)\n      {\n         const entry = this.#pluginMap.get(plugin);\n         const loaded = entry !== void 0;\n         results.push({ plugin, enabled: loaded && entry.enabled, loaded });\n         count++;\n      }\n\n      // Iterable plugins had no entries so return all plugin data.\n      if (count === 0)\n      {\n         for (const [plugin, entry] of this.#pluginMap.entries())\n         {\n            const loaded = entry !== void 0;\n            results.push({ plugin, enabled: loaded && entry.enabled, loaded });\n         }\n      }\n\n      return results;\n   }\n\n   /**\n    * Returns any associated eventbus.\n    *\n    * @returns {import('#manager/eventbus').EventBus} The associated eventbus.\n    */\n   getEventbus()\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      return this.#eventbus;\n   }\n\n   /**\n    * Returns a copy of the plugin manager options.\n    *\n    * @returns {import('.').PluginManagerOptions} A copy of the plugin manager options.\n    */\n   getOptions()\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      return JSON.parse(JSON.stringify(this.#options));\n   }\n\n   /**\n    * Returns the event binding names registered on any associated plugin EventbusProxy.\n    *\n    * @param {object}          opts - Options object.\n    *\n    * @param {string|RegExp}   opts.event - Event name or RegExp to match event names.\n    *\n    * @returns {string[] | import('.').DataOutPluginEvents[]} Event binding names registered from the plugin.\n    */\n   getPluginByEvent({ event })\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof event !== 'string' && !(event instanceof RegExp))\n      {\n         throw new TypeError(`'event' is not a string or RegExp.`);\n      }\n\n      const pluginEvents = this.getPluginEvents();\n\n      const results = [];\n\n      if (typeof event === 'string')\n      {\n         for (const entry of pluginEvents)\n         {\n            if (entry.events.includes(event)) { results.push(entry.plugin); }\n         }\n      }\n      else\n      {\n         for (const entry of pluginEvents)\n         {\n            for (const eventEntry of entry.events)\n            {\n               if (event.test(eventEntry))\n               {\n                  results.push(entry.plugin);\n                  break;\n               }\n            }\n         }\n      }\n\n      return results;\n   }\n\n   /**\n    * Gets the plugin data for a plugin, list of plugins, or all plugins.\n    *\n    * @param {object}                  [opts] - Options object. If undefined all plugin data is returned.\n    *\n    * @param {string|Iterable<string>} [opts.plugins] - Plugin name or iterable list of names to get plugin data.\n    *\n    * @returns {import('.').PluginData | import('.').PluginData[] | undefined} The plugin data for a plugin or list of plugins.\n    */\n   getPluginData({ plugins = [] } = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof plugins !== 'string' && !isIterable(plugins))\n      {\n         throw new TypeError(`'plugins' is not a string or iterable.`);\n      }\n\n      // Return a PluginData result for a single plugin if found.\n      if (typeof plugins === 'string')\n      {\n         const entry = this.#pluginMap.get(plugins);\n         return entry !== void 0 ? JSON.parse(JSON.stringify(entry.data)) : void 0;\n      }\n\n      const results = [];\n\n      let count = 0;\n\n      for (const name of plugins)\n      {\n         const entry = this.#pluginMap.get(name);\n\n         if (entry !== void 0)\n         {\n            results.push(JSON.parse(JSON.stringify(entry.data)));\n         }\n         count++;\n      }\n\n      // Iterable plugins had no entries so return all plugin data.\n      if (count === 0)\n      {\n         for (const entry of this.#pluginMap.values())\n         {\n            if (entry !== void 0)\n            {\n               results.push(JSON.parse(JSON.stringify(entry.data)));\n            }\n         }\n      }\n\n      return results;\n   }\n\n   /**\n    * Gets a PluginEntry instance for the given plugin name. This method is primarily for {@link PluginSupportImpl}\n    * classes.\n    *\n    * @param {string} plugin - The plugin name to get.\n    *\n    * @returns {import('./PluginEntry.js').PluginEntry} The PluginEntry for the given plugin name.\n    */\n   getPluginEntry(plugin)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      return this.#pluginMap.get(plugin);\n   }\n\n   /**\n    * Returns the event binding names registered on any associated plugin EventbusProxy.\n    *\n    * @param {object}                     [opts] - Options object. If undefined all plugin data is returned.\n    *\n    * @param {string | Iterable<string>}  [opts.plugins] - Plugin name or iterable list of names to get plugin data.\n    *\n    * @returns {import('.').DataOutPluginEvents[]} Event binding names registered from the plugin.\n    */\n   getPluginEvents({ plugins = [] } = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof plugins !== 'string' && !isIterable(plugins))\n      {\n         throw new TypeError(`'plugins' is not a string or iterable.`);\n      }\n\n      // Return a PluginData result for a single plugin if found.\n      if (typeof plugins === 'string')\n      {\n         const entry = this.#pluginMap.get(plugins);\n         return entry !== void 0 && entry.eventbusProxy ? [{\n            plugin: plugins,\n            events: Array.from(entry.eventbusProxy.proxyKeys()).sort()\n         }] /* c8 ignore next */ : [];\n      }\n\n      /** @type {import('.').DataOutPluginEvents[]} */\n      const results = [];\n\n      let count = 0;\n\n      for (const plugin of plugins)\n      {\n         const entry = this.#pluginMap.get(plugin);\n\n         if (entry !== void 0)\n         {\n            results.push({\n               plugin,\n               events: entry.eventbusProxy ?\n                Array.from(entry.eventbusProxy.proxyKeys()).sort() /* c8 ignore next */ : []\n            });\n         }\n         count++;\n      }\n\n      // Iterable plugins had no entries so return all plugin data.\n      if (count === 0)\n      {\n         for (const entry of this.#pluginMap.values())\n         {\n            if (entry !== void 0)\n            {\n               results.push({\n                  plugin: entry.name,\n                  events: entry.eventbusProxy ?\n                   Array.from(entry.eventbusProxy.proxyKeys()).sort() /* c8 ignore next */ : []\n               });\n            }\n         }\n      }\n\n      return results;\n   }\n\n   /**\n    * Returns an iterable of plugin map keys (plugin names). This method is primarily for {@link PluginSupportImpl}\n    * classes.\n    *\n    * @returns {Iterable<string>} An iterable of plugin map keys.\n    */\n   getPluginMapKeys()\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      return this.#pluginMap.keys();\n   }\n\n   /**\n    * Returns an iterable of plugin map keys (plugin names). This method is primarily for {@link PluginSupportImpl}\n    * classes.\n    *\n    * @returns {Iterable<PluginEntry>} An iterable of plugin map keys.\n    */\n   getPluginMapValues()\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      return this.#pluginMap.values();\n   }\n\n   /**\n    * Returns all plugin names or if enabled is set then return plugins matching the enabled state.\n    *\n    * @param {object}  [opts] - Options object. If undefined all plugin names are returned regardless of enabled state.\n    *\n    * @param {boolean} [opts.enabled] - If enabled is a boolean it will return plugins given their enabled state.\n    *\n    * @returns {string[]} A list of plugin names optionally by enabled state.\n    */\n   getPluginNames({ enabled = void 0 } = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (enabled !== void 0 && typeof enabled !== 'boolean')\n      {\n         throw new TypeError(`'enabled' is not a boolean.`);\n      }\n\n      const anyEnabledState = enabled === void 0;\n\n      const results = [];\n\n      for (const entry of this.#pluginMap.values())\n      {\n         if (anyEnabledState || entry.enabled === enabled) { results.push(entry.name); }\n      }\n\n      return results.sort();\n   }\n\n   /**\n    * Returns true if there is a plugin loaded with the given plugin name(s). If no options are provided then\n    * the result will be if any plugins are loaded.\n    *\n    * @param {object}                  [opts] - Options object. If undefined returns whether there are any plugins.\n    *\n    * @param {string|Iterable<string>} [opts.plugins] - Plugin name or iterable list of names to check existence.\n    *\n    * @returns {boolean} True if given plugin(s) exist.\n    */\n   hasPlugins({ plugins = [] } = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof plugins !== 'string' && !isIterable(plugins))\n      {\n         throw new TypeError(`'plugins' is not a string or iterable.`);\n      }\n\n      // Return whether a single plugin exists.\n      if (typeof plugins === 'string')\n      {\n         return this.#pluginMap.has(plugins);\n      }\n\n      let count = 0;\n\n      // Return whether all plugins specified exist.\n      for (const name of plugins)\n      {\n         if (!this.#pluginMap.has(name)) { return false; }\n\n         count++;\n      }\n\n      // Iterable plugins had no entries so simply check size of the map.\n      if (count === 0)\n      {\n         return this.#pluginMap.size !== 0;\n      }\n\n      return true;\n   }\n\n   /**\n    * Performs validation of a PluginConfig.\n    *\n    * @param {import('.').PluginConfig}   pluginConfig - A PluginConfig to validate.\n    *\n    * @returns {boolean} True if the given PluginConfig is valid.\n    */\n   isValidConfig(pluginConfig)\n   {\n      return isValidConfig(pluginConfig);\n   }\n\n   /**\n    * Unloads / reloads the plugin invoking `onPluginUnload` / then `onPluginReload`\n    *\n    * @param {object}   opts - Options object.\n    *\n    * @param {string}   opts.plugin - Plugin name to reload.\n    *\n    * @param {object}   [opts.instance] - Optional instance to replace.\n    *\n    * @param {boolean}  [opts.silent] - Does not trigger any reload notification on the eventbus.\n    *\n    * @returns {Promise<boolean>} Result of reload attempt.\n    */\n   async reload({ plugin, instance = void 0, silent = false })\n   {\n      if (typeof plugin !== 'string') { throw new TypeError(`'plugin' is not a string.`); }\n      if (instance !== void 0 && typeof instance !== 'object') { throw new TypeError(`'instance' is not an object.`); }\n      if (typeof silent !== 'boolean') { throw new TypeError(`'silent' is not a boolean.`); }\n\n      const entry = this.#pluginMap.get(plugin);\n\n      if (entry === void 0) { return false; }\n\n      // Store any state to load into new plugin instance.\n      let state = void 0;\n\n      let error = void 0;\n\n      try\n      {\n         // Invokes the private internal async events method which allows skipping of error checking.\n         const unloadData = await invokeAsyncEvent({\n            method: 'onPluginUnload',\n            manager: this,\n            plugins: plugin,\n            errorCheck: false\n         });\n\n         state = unloadData.state;\n      }\n      catch (err)\n      {\n         error = err;\n      }\n\n      // Automatically clean up most resources.\n      entry.reset();\n\n      if (entry.eventbusProxy instanceof EventbusProxy) { entry.eventbusProxy.off(); }\n\n      if (typeof instance === 'object')\n      {\n         entry.instance = instance;\n      }\n\n      // Invokes the private internal async events method which allows skipping of error checking.\n      const invokeData = await invokeAsyncEvent({\n         method: 'onPluginLoad',\n         manager: this,\n         plugins: plugin,\n         passthruProps: { state },\n         errorCheck: false\n      });\n\n      // Invoke `typhonjs:plugin:manager:plugin:reloaded` allowing external code to react to plugin reload.\n      try\n      {\n         if (this.#eventbus && !silent)\n         {\n            await this.#eventbus.triggerAsync(`typhonjs:plugin:manager:plugin:reloaded`,\n             JSON.parse(JSON.stringify(entry.data)));\n         }\n      }\n      catch (err)\n      {\n         // Only track this error if no previous error exists from onPluginUnload invocation.\n         if (error === void 0) { error = err; }\n      }\n\n      if (typeof invokeData.importmeta === 'object')\n      {\n         entry.importmeta = invokeData.importmeta;\n\n         // Until we get a Snowpack HMR spec environment for testing ignore this block.\n         /* c8 ignore next 7 */\n         if (typeof invokeData.importmeta.hot === 'object' && typeof invokeData.importmeta.hot.accept === 'function')\n         {\n            invokeData.importmeta.hot.accept(({ module }) =>\n            {\n               this.reload({ plugin, instance: resolveModule(module) });\n            });\n         }\n      }\n\n      // Throw any error raised first from any onPluginUnload invocation then the\n      // `typhonjs:plugin:manager:plugin:reloaded` event.\n      if (error) { throw error; }\n\n      return true;\n  }\n\n   /**\n    * Removes a plugin by name or all names in an iterable list unloading them and clearing any event bindings\n    * automatically.\n    *\n    * @param {object}                  opts - Options object.\n    *\n    * @param {string|Iterable<string>} opts.plugins - Plugin name or iterable list of names to remove.\n    *\n    * @returns {Promise<import('.').DataOutPluginRemoved[]>} A list of plugin names and removal success state.\n    */\n   async remove({ plugins })\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof plugins !== 'string' && !isIterable(plugins))\n      {\n         throw new TypeError(`'plugins' is not a string or iterable.`);\n      }\n\n      const removeEntry = async (entry) =>\n      {\n         const errors = [];\n\n         const pluginName = entry.name;\n\n         try\n         {\n            // Invokes the private internal async events method which allows skipping of error checking.\n            await invokeAsyncEvent({ method: 'onPluginUnload', manager: this, plugins: pluginName, errorCheck: false });\n         }\n         catch (err)\n         {\n            errors.push(err);\n         }\n\n         entry.reset();\n\n         if (entry.eventbusProxy instanceof EventbusProxy) { entry.eventbusProxy.destroy(); }\n\n         this.#pluginMap.delete(pluginName);\n\n         // Invoke `typhonjs:plugin:manager:plugin:removed` allowing external code to react to plugin removed.\n         try\n         {\n            if (this.#eventbus)\n            {\n               await this.#eventbus.triggerAsync(`typhonjs:plugin:manager:plugin:removed`,\n                JSON.parse(JSON.stringify(entry.data)));\n            }\n         }\n         catch (err)\n         {\n            errors.push(err);\n         }\n\n         return { plugin: pluginName, success: errors.length === 0, errors };\n      };\n\n      const results = [];\n\n      // Return a single boolean enabled result for a single plugin if found.\n      if (typeof plugins === 'string')\n      {\n         const entry = this.#pluginMap.get(plugins);\n\n         if (entry !== void 0)\n         {\n            results.push(await removeEntry(entry));\n         }\n      }\n      else\n      {\n         for (const name of plugins)\n         {\n            const entry = this.#pluginMap.get(name);\n\n            if (entry !== void 0)\n            {\n               results.push(await removeEntry(entry));\n            }\n         }\n      }\n\n      return results;\n   }\n\n   /**\n    * Removes all plugins after unloading them and clearing any event bindings automatically.\n    *\n    * @returns {Promise.<import('.').DataOutPluginRemoved[]>} A list of plugin names and removal success state.\n    */\n   async removeAll()\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      return this.remove({ plugins: Array.from(this.#pluginMap.keys()) });\n   }\n\n   /**\n    * Provides the eventbus callback which may prevent removal if optional `noEventRemoval` is enabled. This disables\n    * the ability for plugins to be removed via events preventing any external code removing plugins in this manner.\n    *\n    * @param {object}                  opts - Options object\n    *\n    * @param {string|Iterable<string>} opts.plugins - Plugin name or iterable list of names to remove.\n    *\n    * @returns {Promise<import('.').DataOutPluginRemoved[]>} A list of plugin names and removal success state.\n    * @private\n    */\n   async _removeEventbus(opts)\n   {\n      /* c8 ignore next */\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      return !this.#options.noEventRemoval ? this.remove(opts) : [];\n   }\n\n   /**\n    * Provides the eventbus callback which may prevent removal if optional `noEventRemoval` is enabled. This disables\n    * the ability for plugins to be removed via events preventing any external code removing plugins in this manner.\n    *\n    * @returns {Promise.<import('.').DataOutPluginRemoved[]>} A list of plugin names and removal success state.\n    * @private\n    */\n   async _removeAllEventbus()\n   {\n      /* c8 ignore next */\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      return !this.#options.noEventRemoval ? this.removeAll() : [];\n   }\n\n   /**\n    * Sets the enabled state of a plugin, a list of plugins, or all plugins.\n    *\n    * @param {object}            opts - Options object.\n    *\n    * @param {boolean}           opts.enabled - The enabled state.\n    *\n    * @param {string|Iterable<string>} [opts.plugins] - Plugin name or iterable list of names to set state.\n    */\n   setEnabled({ enabled, plugins = [] })\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof plugins !== 'string' && !isIterable(plugins))\n      {\n         throw new TypeError(`'plugins' is not a string or iterable.`);\n      }\n\n      if (typeof enabled !== 'boolean') { throw new TypeError(`'enabled' is not a boolean.`); }\n\n      const setEntryEnabled = (entry) =>\n      {\n         if (entry !== void 0)\n         {\n            entry.enabled = enabled;\n\n            // Invoke `typhonjs:plugin:manager:plugin:enabled` allowing external code to react to plugin enabled state.\n            if (this.#eventbus)\n            {\n               this.#eventbus.trigger(`typhonjs:plugin:manager:plugin:enabled`, Object.assign({\n                  enabled\n               }, JSON.parse(JSON.stringify(entry.data))));\n            }\n         }\n      };\n\n      // Set enabled state for a single plugin if found.\n      if (typeof plugins === 'string')\n      {\n         setEntryEnabled(this.#pluginMap.get(plugins));\n      }\n\n      let count = 0;\n\n      // First attempt to iterate through plugins.\n      for (const name of plugins)\n      {\n         setEntryEnabled(this.#pluginMap.get(name));\n         count++;\n      }\n\n      // If plugins is empty then set all plugins enabled state.\n      if (count === 0)\n      {\n         for (const entry of this.#pluginMap.values())\n         {\n            setEntryEnabled(entry);\n         }\n      }\n   }\n\n   /**\n    * Provides the eventbus callback which may prevent setEnabled if optional `noEventSetEnabled` is true. This\n    * disables the ability for setting plugin enabled state via events preventing any external code from setting state.\n    *\n    * @param {object}   opts - Options object.\n    *\n    * @private\n    */\n   _setEnabledEventbus(opts)\n   {\n      /* c8 ignore next */\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (!this.#options.noEventSetEnabled) { this.setEnabled(opts); }\n   }\n\n   /**\n    * Sets the eventbus associated with this plugin manager. If any previous eventbus was associated all plugin manager\n    * events will be removed then added to the new eventbus. If there are any existing plugins being managed their\n    * events will be removed from the old eventbus and then `onPluginLoad` will be called with the new eventbus.\n    *\n    * @param {object}     opts - An options object.\n    *\n    * @param {import('#manager/eventbus').Eventbus}   opts.eventbus - The new eventbus to associate.\n    *\n    * @param {string}     [opts.eventPrepend='plugins'] - An optional string to prepend to all of the event\n    *                                                     binding targets.\n    */\n   async setEventbus({ eventbus, eventPrepend = 'plugins' })\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (!isObject(eventbus)) { throw new TypeError(`'eventbus' is not an Eventbus.`); }\n      if (typeof eventPrepend !== 'string') { throw new TypeError(`'eventPrepend' is not a string.`); }\n\n      // Early escape if the eventbus is the same as the current eventbus.\n      if (eventbus === this.#eventbus) { return; }\n\n      const oldPrepend = this._eventPrepend;\n\n      /**\n       * Stores the prepend string for eventbus registration.\n       *\n       * @type {string}\n       * @private\n       */\n      this._eventPrepend = eventPrepend;\n\n      // Unload and reload any existing plugins from the old eventbus to the target eventbus.\n      if (this.#pluginMap.size > 0)\n      {\n         // Invokes the private internal async events method which allows skipping of error checking.\n         await invokeAsyncEvent({ method: 'onPluginUnload', manager: this, errorCheck: false });\n\n         for (const entry of this.#pluginMap.values())\n         {\n            try\n            {\n               // Automatically remove any potential reference to a stored event proxy instance.\n               delete entry.instance._eventbus;\n            }\n            /* c8 ignore next */\n            catch (err) { /* nop */ }\n\n            entry.data.manager.eventPrepend = eventPrepend;\n            entry.data.manager.scopedName = `${eventPrepend}:${entry.name}`;\n\n            if (entry.eventbusProxy instanceof EventbusProxy) { entry.eventbusProxy.destroy(); }\n\n            entry.eventbusProxy = new EventbusProxy(eventbus);\n\n            // Invokes the private internal async events method which allows skipping of error checking.\n            if (entry.enabled)\n            {\n               await invokeAsyncEvent({\n                  method: 'onPluginLoad',\n                  manager: this,\n                  plugins: entry.name,\n                  errorCheck: false\n               });\n            }\n         }\n      }\n\n      if (this.#eventbus !== null)\n      {\n         this.#eventbus.off(`${oldPrepend}:async:add`, this._addEventbus, this);\n         this.#eventbus.off(`${oldPrepend}:async:add:all`, this._addAllEventbus, this);\n         this.#eventbus.off(`${oldPrepend}:async:destroy:manager`, this._destroyEventbus, this);\n         this.#eventbus.off(`${oldPrepend}:async:remove`, this._removeEventbus, this);\n         this.#eventbus.off(`${oldPrepend}:async:remove:all`, this._removeAllEventbus, this);\n         this.#eventbus.off(`${oldPrepend}:get:enabled`, this.getEnabled, this);\n         this.#eventbus.off(`${oldPrepend}:get:options`, this.getOptions, this);\n         this.#eventbus.off(`${oldPrepend}:get:plugin:by:event`, this.getPluginByEvent, this);\n         this.#eventbus.off(`${oldPrepend}:get:plugin:data`, this.getPluginData, this);\n         this.#eventbus.off(`${oldPrepend}:get:plugin:events`, this.getPluginEvents, this);\n         this.#eventbus.off(`${oldPrepend}:get:plugin:names`, this.getPluginNames, this);\n         this.#eventbus.off(`${oldPrepend}:has:plugin`, this.hasPlugins, this);\n         this.#eventbus.off(`${oldPrepend}:is:valid:config`, this.isValidConfig, this);\n         this.#eventbus.off(`${oldPrepend}:set:enabled`, this._setEnabledEventbus, this);\n         this.#eventbus.off(`${oldPrepend}:set:options`, this._setOptionsEventbus, this);\n      }\n\n      eventbus.on(`${eventPrepend}:async:add`, this._addEventbus, this, { guard: true });\n      eventbus.on(`${eventPrepend}:async:add:all`, this._addAllEventbus, this, { guard: true });\n      eventbus.on(`${eventPrepend}:async:destroy:manager`, this._destroyEventbus, this, { guard: true });\n      eventbus.on(`${eventPrepend}:async:remove`, this._removeEventbus, this, { guard: true });\n      eventbus.on(`${eventPrepend}:async:remove:all`, this._removeAllEventbus, this, { guard: true });\n      eventbus.on(`${eventPrepend}:get:enabled`, this.getEnabled, this, { guard: true });\n      eventbus.on(`${eventPrepend}:get:options`, this.getOptions, this, { guard: true });\n      eventbus.on(`${eventPrepend}:get:plugin:by:event`, this.getPluginByEvent, this, { guard: true });\n      eventbus.on(`${eventPrepend}:get:plugin:data`, this.getPluginData, this, { guard: true });\n      eventbus.on(`${eventPrepend}:get:plugin:events`, this.getPluginEvents, this, { guard: true });\n      eventbus.on(`${eventPrepend}:get:plugin:names`, this.getPluginNames, this, { guard: true });\n      eventbus.on(`${eventPrepend}:has:plugin`, this.hasPlugins, this, { guard: true });\n      eventbus.on(`${eventPrepend}:is:valid:config`, this.isValidConfig, this, { guard: true });\n      eventbus.on(`${eventPrepend}:set:enabled`, this._setEnabledEventbus, this, { guard: true });\n      eventbus.on(`${eventPrepend}:set:options`, this._setOptionsEventbus, this, { guard: true });\n\n      for (const pluginSupport of this.#pluginSupport)\n      {\n         pluginSupport.setEventbus({\n            oldEventbus: this.#eventbus,\n            newEventbus: eventbus,\n            oldPrepend,\n            newPrepend: eventPrepend\n         });\n      }\n\n      // Set the new eventbus for any EventbusSecure instances created.\n      for (const eventbusSecureObj of this.#eventbusSecure)\n      {\n         eventbusSecureObj.setEventbus(eventbus);\n      }\n\n      this.#eventbus = eventbus;\n   }\n\n   /**\n    * Set optional parameters.\n    *\n    * @param {import('.').PluginManagerOptions} options - Defines optional parameters to set.\n    */\n   setOptions(options)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (!isObject(options)) { throw new TypeError(`'options' is not an object.`); }\n\n      if (typeof options.noEventAdd === 'boolean') { this.#options.noEventAdd = options.noEventAdd; }\n\n      if (typeof options.noEventDestroy === 'boolean') { this.#options.noEventDestroy = options.noEventDestroy; }\n\n      if (typeof options.noEventRemoval === 'boolean') { this.#options.noEventRemoval = options.noEventRemoval; }\n\n      if (typeof options.noEventSetEnabled === 'boolean')\n      {\n         this.#options.noEventSetEnabled = options.noEventSetEnabled;\n      }\n\n      if (typeof options.noEventSetOptions === 'boolean')\n      {\n         this.#options.noEventSetOptions = options.noEventSetOptions;\n      }\n\n      if (typeof options.throwNoMethod === 'boolean') { this.#options.throwNoMethod = options.throwNoMethod; }\n\n      if (typeof options.throwNoPlugin === 'boolean') { this.#options.throwNoPlugin = options.throwNoPlugin; }\n\n      for (const pluginSupport of this.#pluginSupport)\n      {\n         pluginSupport.setOptions(options);\n      }\n   }\n\n   /**\n    * Provides the eventbus callback which may prevent plugin manager options being set if optional `noEventSetOptions`\n    * is enabled. This disables the ability for the plugin manager options to be set via events preventing any external\n    * code modifying options.\n    *\n    * @param {import('.').PluginManagerOptions} options - Defines optional parameters to set.\n    *\n    * @private\n    */\n   _setOptionsEventbus(options)\n   {\n      /* c8 ignore next */\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (!this.#options.noEventSetOptions) { this.setOptions(options); }\n   }\n}\n\nexport { PluginInvokeEvent, PluginInvokeSupport, PluginManager, escapeTarget, isValidConfig };\n//# sourceMappingURL=index.js.map\n"],"names":[],"mappings":"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","x_google_ignoreList":[0]}